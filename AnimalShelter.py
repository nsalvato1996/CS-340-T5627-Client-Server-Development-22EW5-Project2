from pymongo import MongoClientclass AnimalShelter(object):    """ CRUD operations for Animal collection in MongoDB """    def __init__(self, username="Administrator", password="Nicholas10"):        # Initializing the MongoClient. This helps to         # access the MongoDB databases and collections.         if username and password:            self.client = MongoClient('mongodb://%s:%s@localhost:47499' % (username, password))        else:            self.client = MongoClient('mongodb://localhost:47499')        self.database = self.client['AAC']# Complete this create method to implement the C in CRUD.    def create(self, data):        if data is not None:            insert = self.database.animals.insert(data)  # data should be dictionary             if insert!=0:                print("True")                return True                            else:                print("False")                return False                   else:            raise Exception("Nothing to save, because data parameter is empty")    # Create method to implement the R in CRUD.    def read(self,criteria=None):        # criteria is not None then this find will return all rows which matches the criteria        if criteria:         # {'_id':False} just omits the unique ID of each row                                data = self.database.animals.find(criteria,{"_id":False})        else:        #if there is no search criteria then all the rows will be return              data = self.database.animals.find( {} , {"_id":False})        return data    def update(self,pairToFind,pairToReplace):        # use update_many method to update values         # If no error return the JSON results        try:                        result = self.update_many(pairToFind,pairToReplace)            return  result(self.read(pairToFind))        # If error return the error message        except Exception as e:            return e        def delete(self,key_value_pairs):        # Use delete_many to delete values        # If no error return the json result        try:            result = self.delete_many(key_value_pairs)            return result(self.read(key_value_pairs))        # return the error         except Exception as e:            return e 